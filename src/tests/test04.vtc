varnishtest "cache post request"
server s1 {
        rxreq
        expect req.body == "BANANE"
        txresp -hdr "OK: yes"
        rxreq
        txresp -hdr "OK: yes"
        rxreq
        txresp -hdr "OK: yes"
} -start

varnish v1 -vcl+backend {
	import bodyaccess from "${vmod_topbuild}/src/.libs/libvmod_bodyaccess.so";
        import std;

	# On cache things that look like model api calls
	sub vcl_recv {
		if (req.method == "POST") {
			# Set the method as a header so we can reuse it for the fetch
			set req.http.x-meth = req.method;
			# Buffer the request body
			std.cache_req_body(10KB);
			return (hash);
		}
		return (pass);
	}

	sub vcl_hash {
		if (req.method == "POST") {
			bodyaccess.hash_req_body();
		}
		return(lookup);
	}

	sub vcl_backend_fetch {
		# Reuse our method we kept as a header in recv
		if (bereq.http.x-meth) {
			set bereq.method = bereq.http.x-meth;
		}
		return(fetch);
	}

	sub vcl_backend_response {
		# Cache everything for 5 minutes
		set beresp.ttl = 5m;
	}

	sub vcl_deliver {
		if (obj.hits > 0) {
			set resp.http.X-Cache = "HIT";
		} else {
			set resp.http.X-Cache = "MISS";
		}
		set resp.http.x-len = req.http.x-len;
	}

} -start



client c1 {
        txreq -req POST -body "BANANE"
        rxresp
        expect resp.http.ok == "yes"
	expect resp.http.X-Cache == "MISS"

        txreq
        rxresp
        expect resp.http.ok == "yes"
	expect resp.http.X-Cache == "MISS"
} -run

client c2 {
        txreq -req POST -nolen -hdr "Transfer-encoding: chunked"
        chunked {BANA}
        delay .2
        chunked {NE}
        delay .2
        chunkedlen 0
        rxresp
        expect resp.http.ok == "yes"
        expect resp.http.X-Cache == "HIT"
} -run

